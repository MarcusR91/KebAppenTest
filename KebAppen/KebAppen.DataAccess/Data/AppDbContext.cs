using KebAppen.Models.Drinks;
using KebAppen.Models.Kebabs;
using KebAppen.Models.Orders;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace KebAppen.DataAccess.Data
{
    public class AppDbContext : IdentityDbContext
    {
        public AppDbContext([NotNull] DbContextOptions options) : base(options)
        { }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            builder.Entity<OrdersAdd>().HasKey(x => new { x.KebabId, x.DrinkingId});

            builder.Entity<OrdersAdd>().HasData(new OrdersAdd
            {
                Id=1,
                Name = "Marcus",
                Comment = "Stark sås",
                KebabId = 1,
                DrinkingId = 1,
            });
            builder.Entity<OrdersAdd>().HasData(new OrdersAdd
            {
                Id=2,
                Name = "Linda",
                Comment = "Extra lök",
                KebabId = 2,
                DrinkingId = 2,
            });
            builder.Entity<Kebab>().HasData(new Kebab
            {
                Id=1,
                Type= "KebabRulle"             
            });
            builder.Entity<Kebab>().HasData(new Kebab
            {
                Id = 2,
                Type = "KebabPizza"
            });
            builder.Entity<Drink>().HasData(new Drink
            {
                Id = 1,
                Type = "coca-Cola"
            });
            builder.Entity<Drink>().HasData(new Drink
            {
                Id = 2,
                Type = "Fanta"
            });

            // IdentityDbContext is expecting to be called through this OnModelCreating
            base.OnModelCreating(builder);
    
        }

        public DbSet<Kebab> Kebabs { get; set; }
        public DbSet<Drink> Drinks { get; set; }
        public DbSet<OrdersAdd> AddedOrder { get; set; }


    }
}
