using AutoMapper;
using KebAppen.Business.DTO.Drink;
using KebAppen.DataAccess.Repositories.Drinks;
using KebAppen.Models.Drinks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace KebAppen.Server.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DrinkController : ControllerBase
    {

        private readonly IDrinkRepository drinkRepo;
        private readonly IMapper mapper;
        public DrinkController(IDrinkRepository drinkRepo, IMapper mapper)
        {
            this.drinkRepo = drinkRepo;
            this.mapper = mapper;
        }

        [HttpGet]
        public async Task<ActionResult<List<DrinkDto>>> GetAllDrinks()
        {
            var availableDrinks = await drinkRepo.GetAllDrinks();

            return mapper.Map<List<DrinkDto>>(availableDrinks);
        }

        [HttpGet("{Id:int}")]
        public async Task<ActionResult<DrinkDto>> GetDrinkById(int Id)
        {
            var drink = await drinkRepo.GetDrinkbyId(Id);

            if(drink == null)
            {
                return NotFound();
            }

            return mapper.Map<DrinkDto>(drink);
        }

        [HttpPost]
        public async Task<ActionResult> AddNewDrink([FromBody] DrinkCreationDto drinkCreation)
        {
           var drink =  mapper.Map<Drink>(drinkCreation);

            drinkRepo.CreateDrink(drink);

            return NoContent();
        }

        [HttpPut("{id:int}")]
        public async Task<ActionResult> UpdateDrink(int id, [FromBody] DrinkCreationDto drinkCreation)
        {
            var drink = await drinkRepo.GetDrinkbyId(id);

            if(drink == null)
            {
                return NotFound();
            }

            drink = mapper.Map(drinkCreation, drink);
            await drinkRepo.SaveDrinkAsync();

            return NoContent();
        }

        [HttpDelete("{id:int}")]
        public async Task<ActionResult> DeleteDrink(int id)
        {
            var drink = await drinkRepo.GetDrinkbyId(id);

            if(drink == null)
            {
                return NotFound();
            }

            drinkRepo.DeleteDrink(drink);
            await drinkRepo.SaveDrinkAsync();

            return NoContent();
        }
    }
}
