using KebAppen.Business.DTO.Order;
using KebAppen.DataAccess.Data;
using KebAppen.Models.Orders;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using AutoMapper;
using KebAppen.Server.MappingProfiles;
using KebAppen.Models.Kebabs;
using KebAppen.Models.Drinks;
using System.Reflection.Metadata.Ecma335;

namespace KebAppen.Server.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class OrderController : ControllerBase
    {
        private readonly IMapper mapper;
        private readonly AppDbContext context;

        public OrderController(IMapper mapper, AppDbContext context)
        {
            this.mapper = mapper;
            this.context = context;
        }

        [HttpPost]
        public async Task<ActionResult> PostOrder([FromBody] OrderCreationDto orderCreation)
        {

            
            var order = mapper.Map<Order>(orderCreation);

            context.Orders.Add(order);
            await context.SaveChangesAsync();

            return NoContent();
        }

        [HttpGet]
        public async Task<ActionResult<List<OrderDto>>> GetAllOrders()
        {
            var orders = await context.Orders.ToListAsync();

            return mapper.Map<List<OrderDto>>(orders);
        }


        [HttpGet("kebabs")]
        public async Task<ActionResult<string>> KebabList()
        {
            List<string> kebabs = await context.Orders.Select(x => x.Name).ToListAsync();


            var duplicates = kebabs.GroupBy(x => x)
                       .Where(g => g.Count() > 0)
                       .Select(y => new { Name = y.Key, Count = y.Count() })
                       .ToList();

            foreach (var i in duplicates)
                return Ok(duplicates);

            return Ok();
        }
        

    }
}
