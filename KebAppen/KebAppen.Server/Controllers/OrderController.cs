using KebAppen.Business.DTO.Order;
using KebAppen.DataAccess.Data;
using KebAppen.Models.Orders;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using AutoMapper;
using KebAppen.Server.MappingProfiles;

namespace KebAppen.Server.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class OrderController : ControllerBase
    {
        private readonly AppDbContext context;
        private readonly IMapper mapper;
        public OrderController(AppDbContext context, IMapper mapper)
        {
            this.context = context;
            this.mapper = mapper;        
        }

        [HttpGet("{id:int}")]
        public ActionResult<OrderDto> GetOrderById(int id)
        {
            var order = context.AddedOrder.Include(x => x.Kebabs).
                Include(x => x.Drinking).FirstOrDefault(x => x.Id == id);
            if(order == null)
            {
                return BadRequest("Fel");
            }
            return mapper.Map<OrderDto>(order);
        }

        [HttpGet]
        public ActionResult<List<OrderDto>> GetAllOrders()
        {
            var orders = context.AddedOrder.Include(x=>x.Kebabs).Include(x=>x.Drinking).ToList();
            //orders.ToList();


            return mapper.Map<List<OrderDto>>(orders);
        }

        [HttpPost]
        public ActionResult<OrderCreationDto> CreateOrder(OrderCreationDto Add)
        {
            Add.Id = context.AddedOrder.OrderByDescending(u => u.Id).FirstOrDefault().Id + 1;
            var OrderCreation = mapper.Map<OrdersAdd>(Add);

            context.AddedOrder.Add(OrderCreation);
            context.SaveChanges();
            

            return Ok();
        }
    }
}
