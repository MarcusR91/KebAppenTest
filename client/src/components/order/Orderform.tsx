import { Form, Formik, FormikHelpers } from "formik";
import { OrderCreationDto } from "./Models/order.model";
import * as Yup from 'yup';
import { Button } from "../utils/Button";
import { Link } from "react-router-dom";
import { TextField } from "../Forms/TextField";
import { SelectField } from "../Forms/SelectField";
import { useEffect, useState } from "react";
import axios, { AxiosResponse } from "axios";
import { KebabDto } from "../kebab/Models/Kebab.model";
import { DrinkDto } from "../Drink/Models/Drinks.model";
import { urlDrinks, urlKebabs } from "../../Endpoints";


export const OrderForm = (props: OrderFormProps) => {

    const [kebabChoice, setKebabChoice] = useState<KebabDto[]>();
    const [drinkChoice, setDrinkChoice] = useState<DrinkDto[]>();

    useEffect(() => {
        axios.get(urlKebabs)
            .then((response: AxiosResponse<KebabDto[]>) => {
                setKebabChoice(response.data);

            })
    }, [])
    useEffect(() => {
        axios.get(urlDrinks)
            .then((response: AxiosResponse<DrinkDto[]>) => {
                setDrinkChoice(response.data);

            })
    }, [])

    return (
        <Formik
            initialValues={props.model}
            onSubmit={props.onSubmit}
            validationSchema={Yup.object({
                firstName: Yup.string().required('This field is required').firstLetterUppercase(),
                lastName: Yup.string().required('This field is required').firstLetterUppercase(),
                empNr: Yup.string().required('This field is required')
            })}
        >
            {(formikProps) => (
                <Form>
                    <TextField displayName="Firstname" field="firstName" type="text" />
                    <TextField displayName="Lastname" field="lastName" type="text" />
                    <TextField displayName="Employee number" field="empNr" type="number" />

                    <SelectField displayName="Kebab" field="name" optionLabel="Välj kebab">
                        <>
                            {kebabChoice?.map(kebabs =>
                                <option key={kebabs.id} value={kebabs.name}>{kebabs.name}</option>)}
                        </>
                    </SelectField>
                    <SelectField displayName="drink" field="typeOfDrink" optionLabel="Välj Dricka">
                        <>
                            {drinkChoice?.map(drinks =>
                                <option key={drinks.id} value={drinks.typeOfDrink}>{drinks.typeOfDrink}</option>)}
                        </>
                    </SelectField>

                    <Button className="btn btn-primary mt-2" disabled={formikProps.isSubmitting} type="submit">Save Changes</Button>
                    <Link className="btn btn-secondary mt-2" to="/drinks">Cancel</Link>
                </Form>
            )}
        </Formik>
    )
}

interface OrderFormProps {
    model: OrderCreationDto;
    onSubmit(values: OrderCreationDto, actions: FormikHelpers<OrderCreationDto>): void;
}